<div class="container">
  <h1>➕ 新增保養/維修紀錄</h1>
  <form action="/dashboard/reports/add" method="POST" class="form">

    <!-- ✅ 自動帶入設備編號 -->
    <label for="m_id">設備編號</label>
    <input type="text" name="m_id" id="m_id" class="form-control" value="<%= m_id %>" readonly>
    <span id="m_id_check" style="color:red;"></span>

    <label for="log_type">保養類型</label>
    <select name="log_type" id="log_type" required>
      <option value="日保養">日保養</option>
      <option value="周保養">周保養</option>
      <option value="季保養">季保養</option>
      <option value="年保">年保</option>
      <option value="故障維修">故障維修</option>
    </select>

    <label>檢查項目：</label>
    <table border="1" cellpadding="8" cellspacing="0">
      <thead>
        <tr>
          <th>項目</th>
          <th>狀態</th>
        </tr>
      </thead>
      <tbody id="check-items-body">
        <!-- JS 動態插入 -->
      </tbody>
    </table>

    <label for="log_desc">保養/維修內容</label>
    <textarea name="log_desc" rows="4" class="form-control"></textarea>

    <button type="submit" class="btn">提交紀錄</button>
  </form>
</div>

<script>
  const mIdInput = document.getElementById('m_id');
  const checkMsg = document.getElementById('m_id_check');
  let timer;

  // ✅ 啟用設備編號檢查（readonly 下這段沒用，但保留以供未來開放使用）
  mIdInput.addEventListener('input', () => {
    clearTimeout(timer);
    const mId = mIdInput.value.trim();
    if (mId === '') {
      checkMsg.textContent = '';
      return;
    }
    checkMsg.style.color = '#555';
    checkMsg.textContent = '🔍 檢查中...';
    timer = setTimeout(async () => {
      try {
        const response = await fetch(`/dashboard/check-mid/${encodeURIComponent(mId)}`);
        const data = await response.json();
        if (data.exists) {
          checkMsg.style.color = 'green';
          checkMsg.textContent = '✔️ 設備存在';
        } else {
          checkMsg.style.color = 'red';
          checkMsg.textContent = '❌ 找不到該設備';
        }
      } catch (error) {
        console.error('設備檢查失敗:', error);
        checkMsg.style.color = 'orange';
        checkMsg.textContent = '⚠️ 無法檢查設備';
      }
    }, 500);
  });

  document.querySelector('form').addEventListener('submit', function (e) {
    const submitButton = this.querySelector('button[type="submit"]');
    submitButton.disabled = true;
    submitButton.textContent = '送出中...';
  });

  // ✅ 檢查項目動態生成邏輯
  const checkItemsMap = {
    '日保養': ['加潤滑油', '機械清潔', '指示燈'],
    '周保養': ['加潤滑油', '機械清潔', '電路正常', '指示燈'],
    '季保養': ['加潤滑油', '機械清潔', '指示燈', '油壓正常', '噪音正常'],
    '年保': ['加潤滑油', '機械清潔', '指示燈', '油壓正常', '噪音正常', '床台間隙', '螺桿間隙', '軸承間隙'],
    '故障維修': ['電路正常', '油壓正常', '噪音正常']
  };

  const itemValueMap = {
    '加潤滑油': 1,
    '機械清潔': 2,
    '指示燈': 4,
    '電路正常': 8,
    '油壓正常': 16,
    '噪音正常': 32,
    '床台間隙': 64,
    '螺桿間隙': 128,
    '軸承間隙': 256
  };

  const checkItemsBody = document.getElementById('check-items-body');
  const logTypeSelect = document.getElementById('log_type');

  function renderCheckItems(type) {
    const requiredItems = new Set(checkItemsMap[type] || []);
    checkItemsBody.innerHTML = '';

    requiredItems.forEach(label => {
      const value = itemValueMap[label];
      const row = document.createElement('tr');
      row.innerHTML = `
        <td class="label">${label}</td>
        <td>
          <input type="hidden" name="log_flags[]" value="${value}">
          <label><input type="radio" name="flag_status_${value}" value="正常" required> 正常</label>
          <label><input type="radio" name="flag_status_${value}" value="不正常"> 不正常</label>
        </td>`;
      checkItemsBody.appendChild(row);
    });

    updateColorHighlighting();
  }

  function updateColorHighlighting() {
    const rows = checkItemsBody.querySelectorAll('tr');
    rows.forEach(row => {
      const radios = row.querySelectorAll('input[type="radio"]');
      const labelTd = row.querySelector('.label');

      radios.forEach(radio => {
        radio.addEventListener('change', () => {
          if (radio.value === '正常' && radio.checked) {
            labelTd.style.color = 'green';
          } else if (radio.value === '不正常' && radio.checked) {
            labelTd.style.color = 'red';
          }
        });
      });
    });
  }

  document.addEventListener('DOMContentLoaded', () => {
    renderCheckItems(logTypeSelect.value);
    logTypeSelect.addEventListener('change', () => {
      renderCheckItems(logTypeSelect.value);
    });
  });
</script>

<style>
  .label {
    transition: color 0.3s;
    font-weight: bold;
  }
  .container {
    max-width: 700px;
    margin: auto;
    padding: 2rem;
  }
  .form {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
  label {
    font-weight: bold;
  }
  input, select, textarea {
    padding: 0.5rem;
    font-size: 1rem;
  }
  .btn {
    padding: 0.5rem 1rem;
    background-color: #28a745;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
  }
</style>
